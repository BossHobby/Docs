{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the QUICKSILVER Docs!","text":"<p>Quicksilver supports the STM32 line F405, F411, F722, F745, F765 and H743 flight controllers, as well as the Artery AT32 line F435/F437. An up to date list of targets can be found in the configurator.</p>"},{"location":"Configuring-Quicksilver/","title":"Configuring Quicksilver","text":"<p>Connect via usb as for flashing. Press the CONNECT button and select the offered port in the pop up window. Once connected you will be in the Profile tab.</p> <p>Occasionally on a Windows pc the serial port doesn't show up. If this happens firstly make sure you have power cycled the fc by replugging the usb. If that doesn't work refer to the Troubleshooting Page.</p> <p>Every time you make a change on a tab remember to click APPLY before leaving the tab. There will always be a confirmation pop up after successfully applying changes.</p>"},{"location":"Configuring-Quicksilver/#quick-setup","title":"Quick Setup","text":"<ol> <li> <p>Name your craft.  </p> </li> <li> <p>Check gyro orientation, make sure the model in the configurator moves as expected. (yaw does not show here)  </p> </li> <li> <p>Make any uart changes needed to get smartaudio or msp-vtx and serial rx to work.  </p> </li> <li> <p>Adjust Dshot, Digital Idle, Turtle Throttle percent and prop direction to suit.  </p> </li> <li> <p>Set up rates and expo and load PID profiles. Filter adjustments should be made after a test flight, defaults are safe.  </p> </li> <li> <p>If you are using a serial connected rx (uart) it will autodetct the protocol, turn on your transmitter and bind. Save the bind with stick gesture U,U,U on the pitch stick followed by D,D,D.  </p> </li> <li> <p>Set Aux channels and flight modes remembering that Quicksilver uses two position switch logic, high or low. Arm is already set on CH5. (Racemode and Horizon mode both require Angle to be active) If no other flight modes are set it will be in Acro/Rate mode only.  </p> </li> <li> <p>Set up OSD.  </p> </li> <li> <p>Check motor direction and order. (props off)  </p> </li> <li> <p>Test fly.  </p> </li> <li> <p>Enjoy \ud83d\udc4d  </p> </li> </ol> <p>Info</p> <p>Quicksilver calibrates the IMU (gyro) on every boot up of the fc. Connect lipo and place the quad down and still within 15 seconds to get correct calibration. You can also calibrate at any time by placing the quad level and using the stick gesture D,D,D</p> <p>More detail is available below on the contents of each tab. There is a tooltip available for many settings, just click on the <code>?</code></p>"},{"location":"Configuring-Quicksilver/#profile","title":"Profile","text":"<p>Here is where you view and save profile information or load a saved profile. You can also name the craft and see which version of the firmware is on it.</p> <p>Profiles are saved as .yaml files and can be edited in a code editor.</p> <p>Target configurations can be uploaded/downloaded here as well, they are also .yaml format (see Runtime targets)</p> <p>We will supply template profiles for some bnf models here These are available within the configurator and are applied after flashing your target.</p> <p></p>"},{"location":"Configuring-Quicksilver/#setup","title":"Setup","text":"<p>In this tab are the basic hardware settings for the flight controller and anything attatched to uarts such as an RX or VTX.</p> <p>Select the uart your RX is attached to as well as the VTX Smart Audio connection if applicable. There is an HD VTX option here also to allow HD VTX control over msp. Some VTX, especially HD ones, will need powered by lipo before connecting to the configurator in order to be detected.</p> <p>In the case of settings/VTX labels not showing then rebooting with a lipo attatched should cause the VTX to show up.</p> <p> </p>"},{"location":"Configuring-Quicksilver/#rates","title":"Rates","text":"<p>Rates, PIDs and Filters are all set here.</p>"},{"location":"Configuring-Quicksilver/#stick-rates","title":"Stick Rates","text":"<p> Choose Silverware rates (default) or Betaflight rates or Actual rates. Two rate profile settings are available.</p>"},{"location":"Configuring-Quicksilver/#throttle-settings","title":"Throttle Settings","text":""},{"location":"Configuring-Quicksilver/#pid","title":"PID","text":"<p>There are two slots to save a PID profile, choose the preset that most closely matches your craft from the drop down menu and LOAD</p>"},{"location":"Configuring-Quicksilver/#filter","title":"Filter","text":"<p> A given filter pass can be disabled by setting the <code>Type</code> to <code>None</code>. For example a single gyro filter can be achieved by setting the <code>Gyro Pass 2 Type</code> to <code>None</code>. Unless otherwise recommended we advise leaving most of the settings here at default values and asking in the Discord server before changing.</p>"},{"location":"Configuring-Quicksilver/#receiver","title":"Receiver","text":"<p>Supported protocols</p> <p>As long as a uart is set for serial connected rx or an spi integrated rx is used the firmware will detect the correct protocol. (Some flight controllers may need a lipo connected to power the rx)</p>"},{"location":"Configuring-Quicksilver/#binding","title":"Binding","text":"<p>Expresslrs - If you are using an spi-rx and have a bindphrase enter it here and click save </p> <p>Redpine/Frsky - Spi-rx will be in bind mode after flashing, press bind on your transmitter and wait until it says RX_STATUS_BOUND in the configurator, then use gesture U,U,U to turn off autobind and follow with gesture D,D,D to save the bind. It will say Bind Saved YES to confirm.</p> <p> </p>"},{"location":"Configuring-Quicksilver/#aux-channels","title":"Aux Channels","text":"<p>Aux switches are only two way, high or low in Quicksilver. You must set an arm switch, Levelmode is required for both Horizon and Racemode to work. If only Arm is set you will be in Acro/Rate mode.   </p> <p>Info</p> <pre><code>The **Aux_Prearm** aux channel should be left set to **ON** unless you are using a prearm switch.\n</code></pre> <p>To find out about other features operated by Aux channels check Features</p> <p></p>"},{"location":"Configuring-Quicksilver/#osd","title":"OSD","text":"<p>Select and move various elements and alter callsign.</p> <p> </p>"},{"location":"Configuring-Quicksilver/#motor","title":"Motor","text":"<p>Warning</p> <p>REMOVE PROPS BEFORE ACTIVATING ANYTHING ON THIS TAB</p> <p>A lipo will need to be connected for most of the functions to work.</p> <p>If your flight controller is in any orientation other than standard you can set the motor pins here. Use the Motor Test function to check position and rotation. If the direction of rotation needs changed the Esc Settings function will allow this.</p> <p></p>"},{"location":"Configuring-Quicksilver/#blackbox","title":"Blackbox","text":"<p>Blackbox recordings can be activated by an AUX switch setup in the Receiver tab and will begin recording on arming when active. Select the sample rate to suit your use case. 1000Hz for analysis or 200Hz for Gyroflow use.</p> <p></p>"},{"location":"Configuring-Quicksilver/#state","title":"State","text":"<p>Live information in time based graphs of many inputs and outputs from the flight controller.</p> <p>Use to check correct operation of rc inputs from your TX and to monitor gyro and accelerometer values.</p> <p></p>"},{"location":"Features/","title":"An explanation of some of Quicksilvers feature set","text":""},{"location":"Features/#stick-gestures","title":"Stick Gestures","text":"<p>Quicksilver uses stick gestures for various functions. We use many inherited from Silverware plus some new ones. Stick gestures are performed using just the Pitch/Roll stick and must be done side to side or up and down, not at an angle. They are fairly timing sensitive so for example gesture down,down,down should be performed about the same speed you'd say it out loud. In these Docs gestures will be indicated by U,U,U or D,D,D etc.</p> Stick Gesture Action <code>UP</code>, <code>UP</code>, <code>UP</code> set bind flag <code>DOWN</code>, <code>DOWN</code>, <code>DOWN</code> save to flash, including bind. if no other gesture was performed, calibrate gyro <code>RIGHT</code>, <code>RIGHT</code>, <code>RIGHT</code> enter osd <code>LEFT</code>, <code>RIGHT</code>, <code>LEFT</code> re-draw osd, useful for hdzero"},{"location":"Features/#voltage","title":"Voltage","text":"<p>Quicksilver uses an algorithm which can be run on battery voltage while a pack is in use which estimates the resulting resting cell voltage if the quad were to land at that or any moment. We call this Fuel gauge volts. It lets you know \"how much gas is left in the tank\" Filtered voltage in contrast is just the exact voltage measured by the adc and then run through a filter to smooth it just a bit for human readability. The Low Voltage warning feature is tied to fuel gauge voltage. So select a resting cell voltage you want to achieve after the end of a flight - update low voltage cutoff to that number.... fly until the warning is pretty consistently triggered (not just a brief flash) .... and when you land, the pack voltage will come to rest pretty close to your warning level. Note: the low voltage warning (which will flash the lipo cell count upon trigger) is always tied to fuel gauge volts no matter which voltage data you choose to display. So even while watching filtered voltage numbers - the cell count will still flash for low voltage based on fuel gauge volts.</p> <p>The best source for moment to moment voltage telemetry or monitoring is filtered volts. This is hard coded for radio telemetry and is the default option for osd display. </p> <p>For increased accuracy of the voltage features the voltage as measured by a multimeter or lipo tester of a fully charged lipo can be entered in the configurator along with the reported telemetry voltage from either the osd or your tx. Quicksilver will then calculate the correct actual value to use.</p>"},{"location":"Features/#filters","title":"Filters","text":""},{"location":"Features/#a-quick-and-dirty-explanation","title":"A Quick and Dirty Explanation","text":"<p>The Gyro filters Quicksilver uses are all lowpass filters this means they allow signal/noise below the specified frequency through. In quadcopters we are generally interested in frequencies under about 120Hz for gyro data, however the cutoff point is not a straight line and follows a slope. The steepness of this slope is indicated by the number after the \"pt\" part of a filter with pt1 being the shallowest angle and the angle increases in order.  The steeper the slope the stronger the filter but the greater the latency, ideally we want as little filtering and therefore latency as our build allows but enough to keep motors cool and flight smooth. Filters chained eg. pass 1 and pass 2 will multiply the effect and increasing the order of filter increase noise attenuation but adds latency. We have found that 2 passes of a pt1 filter generally needs a frequency of about 90HZ and increasing the order can sometimes mean only needing one pass at a frequency a bit higher eg. pt3 at 100Hz or 110Hz.</p>"},{"location":"Features/#dynamic-d-term","title":"Dynamic D-term","text":"<p>Dynamic D term filter, a pt1 filter that moves up in cut frequency (Hz) with a parabolic relationship to applied throttle. The theory here is that propwash is most likely to occur as throttle is applied in dirty air - and propwash is most significantly caused by latency in the D term filtering. Therefore, the approach is to reduce latency in the lowest frequency range of D term filtering which is responsible for the most phase delay as increasing throttle is applied. Noise pass-through will obviously increase with this approach, but when used in combination with \"throttle_dterm_attenuation\" gains on D will also be lowered with increasing throttle. This mitigates much of the danger from reduced filtering while allowing D term to be more effective at eliminating propwash. Motor noise related to rpm is known to have a quadratic relationship with increasing throttle. While a quadratic curve could have been selected for this feature, a faster moving parabolic one was selected in its place as the goal is not to follow motor noise, but to get the filter out of the way as fast as possible in the interest of better performance and handling through reduced D filter latency when you need it most.</p>"},{"location":"Features/#dynamic-notch-filter","title":"Dynamic Notch Filter","text":"<p>Add a dynamic notch filter pass to the gyro pipeline. A sdft algorithm is used to precisely track noise peaks in the gyro signal and then insert notch filters at these frequencies.</p>"},{"location":"Features/#throttle-d-term-attenuation-tda","title":"Throttle D-term attenuation (TDA)","text":"<p>Begins to reduce D-term above a set throttle percentage, TDA breakpoint to a maximum reduction, TDA percent It works as a companion to the Dynamic D-term filter. </p>"},{"location":"Features/#throttle-boost","title":"Throttle Boost","text":"<p>This adds high pass filtered throttle to the regular throttle, which will give more \"sustained\" power when making quick, throttle changing, inputs. It was pretty useful on brushed builds in acro, as those motors were a littler lazier to spool up and down. It's not been tested very much with brushless motors. This could affect your throttle management, but could be highly useful if you have a whoop thats a little lazy to pull out of maneuvers. Suggested values are start with 0.1 and raise fairly slowly until you get the desired effect.  (We would appreciate feedback on this feature)</p>"},{"location":"Features/#torque-boost","title":"Torque Boost","text":"<p>Torque boost is a highly experimental feature and can smoke brushless motors fast. It is a low pass D term filter on motor outputs that will accelerate the response of the motors when the command to the motors is changing by increasing or decreasing the voltage thats sent. It differs from throttle transient compensation in that it acts on all motor commands - not just throttle changes. this feature is very noise sensitive so D term specifically has to be lowered and gyro/D filtering may need to be increased. Recommendation right now is to keep boost at or below 2, drop your P gains a few points, then cut your D in half and retune it back up to where it feels good. About 60 to 65% of your previous D value seems to work.</p>"},{"location":"Features/#stick-boost","title":"Stick Boost","text":"<p>GENERAL SUMMARY OF THIS FEATURE:</p> <p>stickAccelerator and stickTransition are a more detailed version of the traditional D term setpoint weight and transition variables that you may be familiar with in other firmwares. The difference here is that we name the D term setpoint weight \"Stick Accelerator\" because it's actual function is to accelerate the response of the pid controller to stick inputs. Another difference is that negative stick transitions are possible meaning that you can have a higher stick acceleration near center stick which fades to a lower stick acceleration at full stick throws should you desire to see what that feels like. Traditionally we are only used to being able to transition from a low setpoint to a higher one. The final differences are that you can adjust each axis independently and also set up two seperate profiles so that you can switch \"feels\" in flight with the STICK_BOOST_PROFILE aux channel selection set up in the receiver section of config.h</p> <p>HOW TO USE THIS FEATURE:</p> <p>Safe values for stickAccelerator are from 0 to about 2.5 where 0 represents a \"MEASUREMENT\" based D term calculation and is the traditional Silverware PID controller, and a value of 1 represents an \"ERROR\" based D term calculation. Values above 1 add even more acceleration but be reasonable and keep this below about 2.5.</p> <p>Range of acceptable values for stickTransition are from -1 to 1. Do not input a value outside of this range. When stick transition is 0 - no stick transition will take place and stick acceleration will remain constant regardless of stick position. Positive values up to 1 will represent a transition where stick acceleration at it's maximum at full stick deflection and is reduced by whatever percentage you enter here at stick center. For example accelerator at 1 and transition at .3 means that there will be 30% reduction of acceleration at stick center, and acceleration strength of 1 at full stick.</p>"},{"location":"Features/#angle-strength","title":"Angle Strength","text":"<p>Angle Strength adjusts how your craft responds to external forces from bumps to stick inputs Quicksilver has a \"small error angle strength\" and a \"large error angle strength\" - If you want to adjust your craft's \"overreactions\" to collisions - the intended path of user intervention is to reduce your \"large error angle strength\" Conversely, if you want your craft to feel more reactive in response to small stick movements - then this is where you adjust your \"small error angle strength\"</p>"},{"location":"Features/#receivers","title":"Receivers","text":"<p>Supported protocols:</p> <ul> <li>sbus (Frsky XM+ etc, Crossfire, Flysky)</li> <li>crsf (Crossfire/Tracer, ELRS)</li> <li>ibus (Flysky, Futaba)</li> <li>dsm2 (Spektrum)</li> <li>dsmx (Spektrum)</li> <li>SPI-ELRS</li> <li>SPI-Frsky</li> <li>SPI-Flysky</li> <li>SPI-Redpine</li> </ul> <p>The correct protocol will be detected automatically as long as the uart the RX is soldered to is defined. SPI connected RX will be detected if the SPI variant target has been flashed. Firmware for SPI-RX is baked into Quicksilver depending on the board. ExpressLRS passphrase use is encouraged.</p> <p>LQ/RSSI</p> <p>There are many ways to express what your radio link is doing, they all have limitations and depend on various environmental and hardware factors. What Quicksilver uses is packet rate as a percentage with 99 being maximum, no packets lost. ELRS users can select Direct from the LQI source dropdown for faster updates. This information lets you know how healthy your radio link is and can let you decide how much risk you want to take. Be aware that it can drop off very quickly once you are reaching the limit. A healthy radio link should remain in the 90-99 range.</p>"},{"location":"Features/#turtle-mode","title":"Turtle mode","text":"<p>Turtle mode or flip over after crash works by detecting when the craft is inverted and then, when arm is activated it will follow Turtle mode logic. Input on the Pitch/Roll stick will cause the opposite direction motors to instantly spin to the value set in the Setup tab for 2 seconds. If this results in a successful flip over then a disarm, rearm will allow normal flight again.</p> <p>For whoop style craft we recommend setting Turtle throttle to 100% Larger craft will need to have settings adjusted by 10% at a time to achieve a good result without stressing motors/esc too much, use caution! Turtle mode sttings are available in the OSD menu.</p> <p>We also advise setting Turtle mode to ON in Receiver tab which means all you need do is arm while inverted and it's active.</p>"},{"location":"Features/#osd","title":"OSD","text":"<p>The OSD menu is accessed by performing a R,R,R stick gesture on the ROLL/PITCH stick.</p> <p>OSD font and boot logo can be changed, select and upload.</p> <p>The OSD chip on the fc stores font and boot logo so if you want the Quicksilver boot logo you must upload a font once, it will then persist through future firmware flashes. </p> <p>Each element can be positioned by altering the x,y numbers (0,0 is top left corner of the screen) and the font style can be inverted. Callsign must be upper case only.</p> <p>All OSD element settings are also available via the OSD menu. (stick gesture right,right,right) Most settings are available via the osd menu. Use the ROLL/PITCH stick to navigate the menus, RIGHT enters a category and LEFT exits out to the previous level. After making changes, SAVE+EXIT If changes are made and OSD is exited without SAVE+EXIT - changes will be temporarily applied but will not persist after battery disconnect. Some changes will cause a reboot after saving.</p>"},{"location":"Features/#hdzero","title":"HDZero","text":"<p>Hdzero setup is easy as you only have to specify the uart that the vtx is connected to, everything else will be set. Left,right,left stick gesture redraws Quicksilver OSD after using the HDZero menus. If using HDZero it is important to power on the vrx before vtx.  HDZero fonts are handled by the vrx or goggles and a custom Quicksilver HD font is available here</p>"},{"location":"Features/#blackbox","title":"Blackbox","text":"<p>Two sample rates are available, 1000Hz capturing all fields and 200Hz capturing filtered gyro and time data for Gyroflow use. Files can be downloaded in .btfl format for use with PidToolbox and .quic format for use with the Guacalyzer, our own basic analyzer, available here</p>"},{"location":"Features/#motor-test","title":"Motor Test","text":"<p>If selected via AUX or in OSD menu the motors will all spin on raising throttle when armed but will not be under PID control, use the pitch/roll stick to activate a single motor depending on stick position, in order to check the function of that motor. Very useful for checking for bent shafts quickly. This is not a flying mode and care must be taken to not spin motors too fast.</p>"},{"location":"Features/#runtime-targets","title":"Runtime Targets","text":"<p>During the flashing process the target configuration for each flight controller is loaded after the firmware for the MCU. This is called the Runtime Target. The information is stored in a .yaml file format which is easily editable. This allows for adding target variations and potentially home brewed flight controllers. The Target files can be downloaded from the profile tab of the configurator and uploaded again with any changes.</p>"},{"location":"Quick-Start-Guide/","title":"Quick Start","text":""},{"location":"Quick-Start-Guide/#get-the-quicksilver-configurator","title":"Get the Quicksilver Configurator","text":"<p>Quicksilver Configurator is a browser-based application that allows you to flash and configure QUICKSILVER on your quad through the USB port.</p> <p>There is an online version here: Quicksilver Configurator</p> <p>The standalone version can be downloaded here: Quicksilver Configurator releases page</p> <p>Download and unzip the version which matches your operating system.</p> <ul> <li>quic-config-windows-amd64.zip for Windows</li> <li>quic-config-darwin-amd64.zip for Mac</li> <li>quic-config-linux-amd64.zip for Linux</li> </ul>"},{"location":"Quick-Start-Guide/#flashing-a-hex-file","title":"Flashing a Hex File","text":"<p>Warning</p> <p>Ensure your transmitter is turned OFF before attempting to flash firmware. This helps avoid issues getting into bootloader caused by some fcs which don't follow good design practise.</p> <p>Open the Configurator. Click on the <code>Flash</code> tab to go to the firmware flash page.</p> <p>Info</p> <p>Whilst in the <code>Flash</code> tab you will NOT be using the <code>Connect</code> button in the top right</p> <p></p> <p>Connect a compatible flight controller via usb cable. To flash the QUICKSILVER firmware, the flight controller must be in DFU mode (bootloader mode); this can be done by holding the boot button while plugging in the flight controller, or by clicking the <code>Reset to Bootloader</code> button on the GUI. If no compatible device is found, check the Troubleshooting Page.</p> <p>Select the Source from which you want to retrieve a hex file to flash. Selecting BossHobby/QUICKSILVER will download the firmware from github, or choose LOCAL if you have built your own hex file from the source code.</p> <p>Next select the version (Release) to flash - make sure the hex file version is compatible with the gui version you are using by checking the release notes.</p> <p>Finally, select a Target file which matches your hardware. If you don't know which file to flash, make sure to ask on our discord, and get advice from someone experienced with the firmware. The naming convention for hex files is <code>&lt;target_name&gt;_&lt;receiver_type&gt;.&lt;motor_type&gt;</code>. Receiver types with names like frsky or elrs are onboard spi connected receivers and targets without a receiver type refers to serial receivers connected to a uart.</p> <p>Select the <code>Flash</code> button to initiate the flashing process. Progress bars will appear as the flashing process is performed and a feedback will be displayed in the upper right hand corner when complete</p> <p>Note</p> <p>It is best practise to power cycle the fc after flashing and before connecting to the configurator for setup</p> <p>After flashing, proceed to Configuring Quicksilver.</p> <p>If your flash was unsuccessful for any reason - do not stress. The stm32 microprocessors will not be damaged or bricked through the flashing process but may appear unresponsive after a failed flash. To recover the flight-controller, manually initiate dfu by plugging the flight controller in with the boot button pressed, and try again.</p>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":""},{"location":"Troubleshooting/#dfu-bootloader-not-being-detected-windows","title":"DFU (Bootloader) not being detected. (Windows)","text":"<p>Hold the boot button or use the Reset to Bootloader function in the configurator Download and open Zadig</p> <p> Ensure <code>List All Devices</code> is selected in the options.</p> <p> Choose <code>STM32 BOOTLOADER</code> in the dropdown and select <code>WinUSB</code> in the right hand pane. Click <code>Replace Driver</code> and wait for it to finish. Try flashing again in the configurator.</p>"},{"location":"Troubleshooting/#no-serial-port-showing-after-flashing-windows","title":"No serial port showing after flashing. (Windows)","text":"<p>Unplug the fc and replug to ensure a power cycle Download and open Zadig</p> <p> Ensure <code>List All Devices</code> is selected in the options.</p> <p> Choose <code>QUICKSILVER</code> in the dropdown and select <code>USB serial (CDC)</code> in the right hand pane. Click <code>Replace Driver</code> and wait for it to finish. Power cycle again then try the configurator.</p>"},{"location":"Troubleshooting/#exceptions-with-guillemotthrustmaster-drivers-windows","title":"Exceptions with Guillemot/Thrustmaster drivers. (Windows)","text":"<p>The Guillemot/Thrustmaster Driver (GuiSTDFUDev) is  preventing Windows from replacing the driver. This driver is part of some Thrustmaster devices. Zadig says the driver was successfully replaced, but the Guillemot driver actually remains active  if you start Zadig again. In this case, uninstalling the Guillemot/Thrustmaster  driver is the first step. </p> <p></p>"},{"location":"Troubleshooting/#bmi270-filter-recommendations","title":"BMI270 filter recommendations","text":"<p>The bmi270 gyros internal filtering differs from what other common gyros (mpu, icm) come with. As such it needs slightly different software filtering. Recommended values are:</p> <ul> <li>A single gyro pt2 filter at 100hz</li> <li>About half the d-term pid gain (or kd) for Pitch and Roll, of what is specified in the presets.</li> </ul>"},{"location":"About/Contributing/","title":"Contributing","text":""},{"location":"About/Contributing/#contributing-on-the-code-side","title":"Contributing on the code side","text":"<p>Testing and reporting bugs or issues helps the project immensely.  If there is some feature you think we should have please request it, use the issues section here</p> <p>Any coders wishing to join in, all PRs will be considered, you know where to post them.</p>"},{"location":"About/Contributing/#donations","title":"Donations","text":"<p>We have setup an Open Collective Organisation https://opencollective.com/quicksilver  This gives us a well managed way to receive donations and high visibility how the money is spent, as every transaction, be it donation or withdrawal, is logged publicly to this website.</p> <p></p> <p>We are gratefull for any support, thank you. \ud83e\udd51 </p>"},{"location":"About/Development/","title":"Development","text":""},{"location":"About/Development/#adding-a-new-runtime-configuration-variable","title":"Adding a new runtime configuration variable","text":"<p>add a new member to the profile struct, both in the struct itself and in the appropriate *_MEMBERS define.</p> <p>this will make it available in the variable <code>profile.your.variable</code> for you to switch on in the codebase and automatically generate the cbor encoding/decoding code to expose it via usb.  </p>"},{"location":"About/Development/#creating-a-template","title":"Creating a template","text":"<p>All files must be named the same and begin either /tune or /setup</p> <ul> <li>Set up the build to your requirements then save a profile. Edit the .yaml file to only contain the necessary settings for your template. Save as <code>/the name of your template/profile.yaml</code></li> <li>Create a new file with a line for name and a line for description like so Start the first line with name: and the second line with desc:  Save the file as <code>/the name of your template/index.yaml</code></li> <li>Add an image .jpg and save as <code>/the name of your template/image.jpg</code></li> <li>Commit this to the repository and create a pull request from the commit.</li> </ul>"}]}